{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docs-as-Code Tutorial A basic tutorial to create and host a documentation project using MkDocs and GitHub Overview This tutorial explains how to create a static site for documentation using a docs-like-code approach. It will guide you to the process of: Setting up a local documentation project. Hosting your documentation project in a remote repository hosting site. Setting up an automated deploying process to a static web site. Prerequisites There are many different tools available \u2013from static site generators to hosting sites\u2013 but for this tutorial we will use: MkDocs to create the static site. (\u2139) MkDocs requires Python and pip package manager. If you are using Mac you should have them installed already. Verify if you have them by running python --version and pip --version in a Terminal window. GitHub to host the documentation repository. GitHub Pages to automate the deploying process and host the web site. The tutorial guides you through the process of installing and configuring the required tools. Get Help and Give Feedback If you follow this tutorial and need help or find something that is not working or can be improved, don't hesitate to reach out at: mario.morales@wizeline.com .","title":"Home"},{"location":"#docs-as-code-tutorial","text":"A basic tutorial to create and host a documentation project using MkDocs and GitHub","title":"Docs-as-Code Tutorial"},{"location":"#overview","text":"This tutorial explains how to create a static site for documentation using a docs-like-code approach. It will guide you to the process of: Setting up a local documentation project. Hosting your documentation project in a remote repository hosting site. Setting up an automated deploying process to a static web site.","title":"Overview"},{"location":"#prerequisites","text":"There are many different tools available \u2013from static site generators to hosting sites\u2013 but for this tutorial we will use: MkDocs to create the static site. (\u2139) MkDocs requires Python and pip package manager. If you are using Mac you should have them installed already. Verify if you have them by running python --version and pip --version in a Terminal window. GitHub to host the documentation repository. GitHub Pages to automate the deploying process and host the web site. The tutorial guides you through the process of installing and configuring the required tools.","title":"Prerequisites"},{"location":"#get-help-and-give-feedback","text":"If you follow this tutorial and need help or find something that is not working or can be improved, don't hesitate to reach out at: mario.morales@wizeline.com .","title":"Get Help and Give Feedback"},{"location":"deploy/","text":"Deploying to a Static Site Hosting Service This section provides you with three different options to deploy and automate your deploy process to a site hosting service. Deploying to GitHub Pages Deploying to GitHub Pages is the easiest way to host your documentation project. You only need to run the following command in your project directory: mkdocs gh-deploy . MkDocs builds the static files and commits the changes to a new branch in your GitHub repository called gh-pages , which will be used by GitHub Pages as the documentation files source. To verify that the branch has been created and to view your documentation site live: Go to GitHub and navigate to your documentation project repository. Click the Branch: dropdown menu and look for a new branch called gh-pages . If you have it, that means that your docs are ready in GitHub Pages. Click the Settings tab at the upper right corner: Navigate to the GitHub Pages section, where you can find the link to your documentation project page. IMPORTANT : If you make changes to your documentation site, after pushing your changes to origin master , remember to run the mkdocs gh-deploy command to also update your GitHub pages with the latest changes. Alternatives for Deploying Deploying to an AWS S3 Bucket To follow this approach: Login to Amazon Web Services or create a new account. Create an S3 bucket Configure the S3 bucket for static website hosting . To deploy your files to the site: You can upload the static files in the site folder that you created with the mkdocs build command to the S3 bucket and your site is ready in the provided S3 website URL. You can use the Amazon CLI to sync the build with a deploy to S3. Install the AWS CLI Configure the AWS CLI Run the following command inside your project directory to start the build process and deploy to your S3 bucket: mkdocs build aws s3 sync site/ s3:// your-bucket-name . Deploying to Netlify To ensure a smooth deployment with Netlify, you need to add a new configuration file called requirements.txt in your main project directory with the following line as its content: mkdocs =0.9.0 Your project structure must be something like the following: docs-as-code-tutorial \u251c\u2500\u2500 docs | \u251c\u2500\u2500 index.md | \u2514\u2500\u2500 local-site.md | \u2514\u2500\u2500 repo.md | \u2514\u2500\u2500 deploy.md \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 requirements.txt To connect your repository with Netlify: Log in to Netlify or create a new account. Click the New site from Git button. Click the GitHub button. Click Continue . \u26a0 IMPORTANT : Don't click the Authorize button if you are asked to authorize access to the Organization you belong to. You will grant access later only to your personal account. Click the Configure Netlify on GitHub button. Click your username when prompted. Click the Only select repositories option. Select the name of your repository you just created from the dropdown list. Click Install . Click the name of your repository under your username to go to the build and deploy options. Under the Deploy settings : Leave Owner as default. Branch to deploy : master . Build command : mkdocs build . Publish directory : site/ . Click the Deploy site button. The deploying process starts. When finished, Netlify gives you the address where your site is deployed. Every time you commit your changes and push them to your remote Github repository, Netlify redeploys your site.","title":"Deploy"},{"location":"deploy/#deploying-to-a-static-site-hosting-service","text":"This section provides you with three different options to deploy and automate your deploy process to a site hosting service.","title":"Deploying to a Static Site Hosting Service"},{"location":"deploy/#deploying-to-github-pages","text":"Deploying to GitHub Pages is the easiest way to host your documentation project. You only need to run the following command in your project directory: mkdocs gh-deploy . MkDocs builds the static files and commits the changes to a new branch in your GitHub repository called gh-pages , which will be used by GitHub Pages as the documentation files source. To verify that the branch has been created and to view your documentation site live: Go to GitHub and navigate to your documentation project repository. Click the Branch: dropdown menu and look for a new branch called gh-pages . If you have it, that means that your docs are ready in GitHub Pages. Click the Settings tab at the upper right corner: Navigate to the GitHub Pages section, where you can find the link to your documentation project page. IMPORTANT : If you make changes to your documentation site, after pushing your changes to origin master , remember to run the mkdocs gh-deploy command to also update your GitHub pages with the latest changes.","title":"Deploying to GitHub Pages"},{"location":"deploy/#alternatives-for-deploying","text":"","title":"Alternatives for Deploying"},{"location":"deploy/#deploying-to-an-aws-s3-bucket","text":"To follow this approach: Login to Amazon Web Services or create a new account. Create an S3 bucket Configure the S3 bucket for static website hosting . To deploy your files to the site: You can upload the static files in the site folder that you created with the mkdocs build command to the S3 bucket and your site is ready in the provided S3 website URL. You can use the Amazon CLI to sync the build with a deploy to S3. Install the AWS CLI Configure the AWS CLI Run the following command inside your project directory to start the build process and deploy to your S3 bucket: mkdocs build aws s3 sync site/ s3:// your-bucket-name .","title":"Deploying to an AWS S3 Bucket"},{"location":"deploy/#deploying-to-netlify","text":"To ensure a smooth deployment with Netlify, you need to add a new configuration file called requirements.txt in your main project directory with the following line as its content: mkdocs =0.9.0 Your project structure must be something like the following: docs-as-code-tutorial \u251c\u2500\u2500 docs | \u251c\u2500\u2500 index.md | \u2514\u2500\u2500 local-site.md | \u2514\u2500\u2500 repo.md | \u2514\u2500\u2500 deploy.md \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 requirements.txt To connect your repository with Netlify: Log in to Netlify or create a new account. Click the New site from Git button. Click the GitHub button. Click Continue . \u26a0 IMPORTANT : Don't click the Authorize button if you are asked to authorize access to the Organization you belong to. You will grant access later only to your personal account. Click the Configure Netlify on GitHub button. Click your username when prompted. Click the Only select repositories option. Select the name of your repository you just created from the dropdown list. Click Install . Click the name of your repository under your username to go to the build and deploy options. Under the Deploy settings : Leave Owner as default. Branch to deploy : master . Build command : mkdocs build . Publish directory : site/ . Click the Deploy site button. The deploying process starts. When finished, Netlify gives you the address where your site is deployed. Every time you commit your changes and push them to your remote Github repository, Netlify redeploys your site.","title":"Deploying to Netlify"},{"location":"local-site/","text":"Setting Up Your Local Project This section guides you through the process of creating your local documentation repository. Installing and Creating Your Project Install MkDocs by running this command in your Terminal: pip install mkdocs Verify the installation by running this command: mkdocs --version You should get something like this as a response: mkdocs, version 1.0.4 from ... Run this command to create your local project: mkdocs new docs-as-code-tutorial (\u2139) You can use a different name for your project This creates a folder with a configuration file called mkdocs.yml and a folder called docs , which contains an index.md file. The index.md file is the main page of your new site. You can add more pages there by creating new Markdown files inside the docs folder. Below is a section explaining how to do it. Navigate to your created project with: cd docs-as-code-tutorial You can preview your static site as you work on it by running the following command: mkdocs serve This command starts a local server with your rendered page so you can see how it will look before you publish it. Open a web browser and go to the local http server listed in the last command response ( http://127.0.0.1:8000/ ) to see your rendered page. Customizing Your Site You can start modifying the files in your project with your documentation details. Open the index.md file and change the title and information in the file and save them to see the changes update on your local server. Open the mkdocs.yml file and change the site_name value to your documentation project name: site_name: Docs-as-code Tutorial Creating More Pages You can add more pages to your site by modifying the mkdocs.yml configuration file. To do so, add the name of each page you want to add to your site and the file corresponding as key: value pairs under a nav key: site_name: Docs-as-code Tutorial nav: - Home: index.md - Local Setup: local-site.md - Remote Repository: repo.md - Deploy: deploy.md The order of the files is going to be the same in which they will appear on your navigation panel: Building the Static Files Follow these steps to build the static files of your site: Run the following commang in your Terminal from your documentation directory: mkdocs build Run the following command to create a file that avoids pushing your build files into the remote repository: echo \"site/\" .gitignore The static files ( index.html , CSS files, and others) are now available in the site directory. You can use the files in that directory to host your site in an AWS S3 bucket or any other static site hosting service.","title":"Local Setup"},{"location":"local-site/#setting-up-your-local-project","text":"This section guides you through the process of creating your local documentation repository.","title":"Setting Up Your Local Project"},{"location":"local-site/#installing-and-creating-your-project","text":"Install MkDocs by running this command in your Terminal: pip install mkdocs Verify the installation by running this command: mkdocs --version You should get something like this as a response: mkdocs, version 1.0.4 from ... Run this command to create your local project: mkdocs new docs-as-code-tutorial (\u2139) You can use a different name for your project This creates a folder with a configuration file called mkdocs.yml and a folder called docs , which contains an index.md file. The index.md file is the main page of your new site. You can add more pages there by creating new Markdown files inside the docs folder. Below is a section explaining how to do it. Navigate to your created project with: cd docs-as-code-tutorial You can preview your static site as you work on it by running the following command: mkdocs serve This command starts a local server with your rendered page so you can see how it will look before you publish it. Open a web browser and go to the local http server listed in the last command response ( http://127.0.0.1:8000/ ) to see your rendered page.","title":"Installing and Creating Your Project"},{"location":"local-site/#customizing-your-site","text":"You can start modifying the files in your project with your documentation details. Open the index.md file and change the title and information in the file and save them to see the changes update on your local server. Open the mkdocs.yml file and change the site_name value to your documentation project name: site_name: Docs-as-code Tutorial","title":"Customizing Your Site"},{"location":"local-site/#creating-more-pages","text":"You can add more pages to your site by modifying the mkdocs.yml configuration file. To do so, add the name of each page you want to add to your site and the file corresponding as key: value pairs under a nav key: site_name: Docs-as-code Tutorial nav: - Home: index.md - Local Setup: local-site.md - Remote Repository: repo.md - Deploy: deploy.md The order of the files is going to be the same in which they will appear on your navigation panel:","title":"Creating More Pages"},{"location":"local-site/#building-the-static-files","text":"Follow these steps to build the static files of your site: Run the following commang in your Terminal from your documentation directory: mkdocs build Run the following command to create a file that avoids pushing your build files into the remote repository: echo \"site/\" .gitignore The static files ( index.html , CSS files, and others) are now available in the site directory. You can use the files in that directory to host your site in an AWS S3 bucket or any other static site hosting service.","title":"Building the Static Files"},{"location":"more-resources/","text":"More Resources This is a basic example of a docs-as-code approach for writing documentation. You can search for more tools and ways to implement them together and see which ones work better for you. Static Site Generators Visit this site https://www.staticgen.com/ to see different options of static site generators. Some of the most common ones are: MkDocs Gatsby Hugo Docsify VuePress Jekyll Repository Hosting Even though GitHub is a very popular Git repository hosting site, other options available are: GitLab Bitbucket Site Deploying and Hosting Additionally to Netlify , you can explore different tools to deploy and host your static pages, such as: AWS S3 Heroku GitHub Pages","title":"More Resources"},{"location":"more-resources/#more-resources","text":"This is a basic example of a docs-as-code approach for writing documentation. You can search for more tools and ways to implement them together and see which ones work better for you.","title":"More Resources"},{"location":"more-resources/#static-site-generators","text":"Visit this site https://www.staticgen.com/ to see different options of static site generators. Some of the most common ones are: MkDocs Gatsby Hugo Docsify VuePress Jekyll","title":"Static Site Generators"},{"location":"more-resources/#repository-hosting","text":"Even though GitHub is a very popular Git repository hosting site, other options available are: GitLab Bitbucket","title":"Repository Hosting"},{"location":"more-resources/#site-deploying-and-hosting","text":"Additionally to Netlify , you can explore different tools to deploy and host your static pages, such as: AWS S3 Heroku GitHub Pages","title":"Site Deploying and Hosting"},{"location":"repo/","text":"Hosting Your Project in GitHub This section explains how to store your project files in a remote repository. Creating a GitHub Repository Follow the next steps to create a GitHub repository to host your documentation files. Go to GitHub and login or create a new account if you don't have one. Create a new repository. Add a name and a description to your repository. NOTE : Don't initialize the reposotory with a README. Make sure the option is unchecked before you create the repository. Click Create repository . Copy the HTTPS address \u2013or SSH if you have SSH keys configured. Pushing Your Documents to the Remote GitHub Repository Follow the next steps to push your documents to the remote repository: Navigate to your project directory from a Terminal window. Run the following command to initialize your Git repository: git init Add your documentation files to the repository with this command: git add . Commit your changes: git commit -m \"first commit\" Add your local repository to the remote GitHub repository with this command: git remote add origin HTTPS OR SSH ADDRESS CORRESPONDING TO YOUR REPOSITORY Push your documents to GitHub: git push -u origin master","title":"Remote Repository"},{"location":"repo/#hosting-your-project-in-github","text":"This section explains how to store your project files in a remote repository.","title":"Hosting Your Project in GitHub"},{"location":"repo/#creating-a-github-repository","text":"Follow the next steps to create a GitHub repository to host your documentation files. Go to GitHub and login or create a new account if you don't have one. Create a new repository. Add a name and a description to your repository. NOTE : Don't initialize the reposotory with a README. Make sure the option is unchecked before you create the repository. Click Create repository . Copy the HTTPS address \u2013or SSH if you have SSH keys configured.","title":"Creating a GitHub Repository"},{"location":"repo/#pushing-your-documents-to-the-remote-github-repository","text":"Follow the next steps to push your documents to the remote repository: Navigate to your project directory from a Terminal window. Run the following command to initialize your Git repository: git init Add your documentation files to the repository with this command: git add . Commit your changes: git commit -m \"first commit\" Add your local repository to the remote GitHub repository with this command: git remote add origin HTTPS OR SSH ADDRESS CORRESPONDING TO YOUR REPOSITORY Push your documents to GitHub: git push -u origin master","title":"Pushing Your Documents to the Remote GitHub Repository"}]}